#1
=======================================================
str_slug()

#2,  Route::group(), Route::get('slug', [uses => 'controller', as => 'name']),
route('name', [slug => $someSlug]), Storage::url($url)
========================================== ==========================================
Route::group(['middleware' => 'auth'], function () {
    Route::get('profile/{slug}', [
        'uses' => 'ProfilesController@index',
        'as' => 'profile'
    ]);
});

<a href="{{ route('profile', ['slug' => Auth::user()->slug ]) }}">My profile</a>
<img src="{{ Storage::url($user->avatar) }}" height="70px" width="70px" alt="">

php artisan storage:link // in my case it wasn't necessary

#3, Relationship one to one
===========================================================
$this->hasOne(Profile::class)
$this->belongsTo(User::class)

#5,
===========================================================
//inside register controller to add a row inside profiles table. otherwise i got error
$user->profile()->create([]);
return $user;
//update through relation
auth()->user()->profile->update([
    'location' => request('location'),
    'about' => request('about')
]);
public function update(Request $r) {
    auth()->user()->profile->update([
        'location' => $r->location,
        'about' => $r->about
    ]);
}

#6 upload images
=======================================
//form attribute
enctype="multipart/form-data">
//avatar storage
if($r->hasFile('avatar')) {
    Auth::user()->update([
        'avatar' => $r->avatar->store('public/avatars')
    ]);
}

#8 using noty
==================================================
require('noty'); in bootstrap.js
and use noty in blade template
@if (Session::has('success'))
    noty({
        type: 'success',
        layout: 'bottomRight',
        text: "{{ Session::get('success') }}"
    });
@endif

#9 trait
==================================================
use App\Traits\Friendable;
    use Friendable;
//Friendable.php
namespace App\Traits
trait Friendable {
    public function hello() {
        return 'hello world'
    }
}

#10 Friendable trait
====================================================
response()->json($friendship, 200);
json('fail', 501);

#11 Testing add_friend and accept_friend method
====================================================
factory('<model>App\User', <number>5)->create()
App\User::first();

#12 Adding friends function inside Friendable trait
====================================================
array_push($array, $value);
foreach($arr, $val)

#13, collect, is_array( $needle, $heystack )
====================================================
return collect($this->friends())->pluck('id'); //return []
is_array($user_id, $this->friends_id()->toArray())

#14, added add_friend and accept_friend validation
====================================================
#15, added view profile
====================================================
//vue
Vue.component('profile', require('./components/profiles/Profiles.vue'));
mounted() {}, props: []

#16, 
====================================================

#17, 
====================================================
data () {
    return {

    }
}
#18
====================================================
#21
====================================================
yarn add laravel-echo
uncomment echo stuff inside bootstrap.js file
pusher and mailtrap key in .env file
uncomment broadcasting service provider class in config/app.php file
php artisan notifications:table
php artisan migrate

#22
====================================================
php artisan make:notification NewFriendRequest
//inside FriendshipsController
User::find($id)->notify(new NewFriendRequest(Auth::user()));
//inside NewFriendRequest
public function via($notifiable)
{
    return ['mail', 'database', 'broadcast'];
}
public function toArray($notifiable)
{
    return [
        'name' => $this->user->name,
        'messages' => $this->user->name . ' has sent you friend request'
    ];
}

#24 shit things happen when i try to implement notification. in NewFriendRequest class I should implement toBroadcast function inorder to pusher:subscription_succeeded
===============================================================================================================
composer require pusher/pusher-php-server //for backend driver
npm install --save laravel-echo pusher-js //for frontend dependencies
App\Providers\BroadcastServiceProvider //uncomment in config/app.php
add pusher credentials in .env file. use default cluster when make a pusher app(due to default cluster i faced issue);
//uncomment following code inside resources/assets/js/bootstrap.js
import Echo from "laravel-echo"
window.Pusher = require('pusher-js');
window.Echo = new Echo({
    broadcaster: 'pusher',
    key: 'your-pusher-key'
});
implement toBroadcast function in generated notification class
public function toBroadcast($notifiable)
{
    return new BroadcastMessage([
        'name' => $this->user->name,
        'messages' => $this->user->name . ' has sent you friend request'
        ]);
}
//in frontend using echo for notification receiving and making app/broadcast/auth request
Echo.private(`App.User.${this.id}`)
.notification((notification) => {
    console.log(notification.type);
});

#27 laravel queue system
===============================================================================================================
from .env file set QUEUE_DRIVER=database
php artisan queue:table >> to create job table
Notification class will implements ShouldQueue class
//to iterate through all queue from database
php artisan queue:work //its continuous 

#28
===============================================================================================================
//for getting public directory inside blade
{{ asset('file_path') }}

#29 store management using vuex
==============================================================
Vue.use(Vuex);
export const store = new Vuex.Store({
  state: {
    auth: false
  }
})
//adding root vue instance
const app = new Vue({
    el: '#app',
    store
});
#30 
==============================================================
getters: {}, mutations: {}, actions: {}

#31 
==============================================================
//for getting unreadNotifications of authenticate user
return auth()->user()->unreadNotifications;

#31 adding data to store and retrieving data from store
==============================================================
//adding data
this.$store.commit('addNotifications', notification);
//retrieving data inside computed:
return this.$store.getters.allNotificationsCount;
//inside store state is the bound first argument inside getters and mutations
  getters: {
    allNotifications(state) {
      return state.notifications;
    }
  },
  mutations: {
    addNotifications(state, notification) {
      return state.notifications.push(notification);
    }
  }

#34 
==============================================================
{{ $notification->data['name'] }} &nbsp; {{ $notification->data['message'] }}
public function notifications(){
    auth()->user()->unreadNotifications->markAsRead();
    return view('notifications.notifications')->with('notifications', auth()->user()->notifications);
}
#35  watch:
==============================================================
data () {
    return {
        content: ""
    }
}
watch: {
    content() {
      if (this.content.length > 0) {
        this.btnDisabled = false
      } else {
        this.btnDisabled = true
      }
    }
}

#39
==============================================================
$friends = Auth::user()->friends();










